{
  "version": 3,
  "sources": ["../../../../../app/routes/_layout+/settings+/profile.password_.create.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/_layout+/settings+/profile.password_.create.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/_layout+/settings+/profile.password_.create.tsx\");\n  import.meta.hot.lastModified = \"1706962583487.3772\";\n}\n// REMIX HMR END\n\nimport { getFormProps, getInputProps, useForm } from '@conform-to/react';\nimport { getZodConstraint, parseWithZod } from '@conform-to/zod';\nimport { json, redirect } from '@remix-run/node';\nimport { Form, Link, useActionData } from '@remix-run/react';\nimport { getPasswordHash, prisma, requireUserId } from '~/app/core/server/index.server.ts';\nimport { useIsPending } from '~/app/shared/lib/hooks/index.ts';\nimport { PasswordAndConfirmPasswordSchema } from '~/app/shared/schemas/index.ts';\nimport { Button, ErrorList, Field, Icon, StatusButton } from '~/app/shared/ui/index.ts';\nexport const handle = {\n  breadcrumb: <Icon name=\"dots-horizontal\">Password</Icon>,\n  getSitemapEntries: () => null\n};\nconst CreatePasswordForm = PasswordAndConfirmPasswordSchema;\nasync function requireNoPassword(userId) {\n  const password = await prisma.password.findUnique({\n    select: {\n      userId: true\n    },\n    where: {\n      userId\n    }\n  });\n  if (password) {\n    throw redirect('/settings/profile/password');\n  }\n}\nexport async function loader({\n  request\n}) {\n  const userId = await requireUserId(request);\n  await requireNoPassword(userId);\n  return json({});\n}\nexport async function action({\n  request\n}) {\n  const userId = await requireUserId(request);\n  await requireNoPassword(userId);\n  const formData = await request.formData();\n  const submission = await parseWithZod(formData, {\n    async: true,\n    schema: CreatePasswordForm\n  });\n  if (submission.status !== 'success') {\n    return json({\n      result: submission.reply({\n        hideFields: ['password', 'confirmPassword']\n      })\n    }, {\n      status: submission.status === 'error' ? 400 : 200\n    });\n  }\n  const {\n    password\n  } = submission.value;\n  await prisma.user.update({\n    select: {\n      username: true\n    },\n    where: {\n      id: userId\n    },\n    data: {\n      password: {\n        create: {\n          hash: await getPasswordHash(password)\n        }\n      }\n    }\n  });\n  return redirect(`/settings/profile`, {\n    status: 302\n  });\n}\nexport default function CreatePasswordRoute() {\n  _s();\n  const actionData = useActionData();\n  const isPending = useIsPending();\n  const [form, fields] = useForm({\n    id: 'password-create-form',\n    constraint: getZodConstraint(CreatePasswordForm),\n    lastResult: actionData?.result,\n    onValidate({\n      formData\n    }) {\n      return parseWithZod(formData, {\n        schema: CreatePasswordForm\n      });\n    },\n    shouldRevalidate: 'onBlur'\n  });\n  return <Form method=\"POST\" {...getFormProps(form)} className=\"mx-auto max-w-md\">\n\t\t\t<Field labelProps={{\n      children: 'New Password'\n    }} inputProps={{\n      ...getInputProps(fields.password, {\n        type: 'password'\n      }),\n      autoComplete: 'new-password'\n    }} errors={fields.password.errors} />\n\t\t\t<Field labelProps={{\n      children: 'Confirm New Password'\n    }} inputProps={{\n      ...getInputProps(fields.confirmPassword, {\n        type: 'password'\n      }),\n      autoComplete: 'new-password'\n    }} errors={fields.confirmPassword.errors} />\n\n\t\t\t<ErrorList id={form.errorId} errors={form.errors} />\n\n\t\t\t<div className=\"grid w-full grid-cols-2 gap-6\">\n\t\t\t\t<Button variant=\"secondary\" asChild>\n\t\t\t\t\t<Link to=\"..\">Cancel</Link>\n\t\t\t\t</Button>\n\t\t\t\t<StatusButton type=\"submit\" status={isPending ? 'pending' : form.status ?? 'idle'}>\n\t\t\t\t\tCreate Password\n\t\t\t\t</StatusButton>\n\t\t\t</div>\n\t\t</Form>;\n}\n_s(CreatePasswordRoute, \"qg6D+LQiyyBwoKKZlQs9OeApyZ8=\", false, function () {\n  return [useActionData, useIsPending, useForm];\n});\n_c = CreatePasswordRoute;\nvar _c;\n$RefreshReg$(_c, \"CreatePasswordRoute\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuBA,kBAA+B;AAOjB;AA7Bd,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,iEAAmE,EAAE;AAAA,EAC9G;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAA4D;AAC5D,cAAY,IAAI,eAAe;AACjC;AAWO,IAAM,SAAS;AAAA,EACpB,YAAY,mDAAC,QAAK,MAAK,mBAAkB,wBAA7B;AAAA;AAAA;AAAA;AAAA,SAAqC;AAAA,EACjD,mBAAmB,MAAM;AAC3B;AACA,IAAM,qBAAqB;AA8DZ,SAAR,sBAAuC;AAC5C,KAAG;AACH,QAAM,aAAa,cAAc;AACjC,QAAM,YAAY,aAAa;AAC/B,QAAM,CAAC,MAAM,MAAM,IAAI,QAAQ;AAAA,IAC7B,IAAI;AAAA,IACJ,YAAY,iBAAiB,kBAAkB;AAAA,IAC/C,YAAY,YAAY;AAAA,IACxB,WAAW;AAAA,MACT;AAAA,IACF,GAAG;AACD,aAAO,aAAa,UAAU;AAAA,QAC5B,QAAQ;AAAA,MACV,CAAC;AAAA,IACH;AAAA,IACA,kBAAkB;AAAA,EACpB,CAAC;AACD,SAAO,mDAAC,QAAK,QAAO,QAAQ,GAAG,aAAa,IAAI,GAAG,WAAU,oBAC5D;AAAA,uDAAC,SAAM,YAAY;AAAA,MAChB,UAAU;AAAA,IACZ,GAAG,YAAY;AAAA,MACb,GAAG,cAAc,OAAO,UAAU;AAAA,QAChC,MAAM;AAAA,MACR,CAAC;AAAA,MACD,cAAc;AAAA,IAChB,GAAG,QAAQ,OAAO,SAAS,UAP5B;AAAA;AAAA;AAAA;AAAA,WAOoC;AAAA,IACpC,mDAAC,SAAM,YAAY;AAAA,MAChB,UAAU;AAAA,IACZ,GAAG,YAAY;AAAA,MACb,GAAG,cAAc,OAAO,iBAAiB;AAAA,QACvC,MAAM;AAAA,MACR,CAAC;AAAA,MACD,cAAc;AAAA,IAChB,GAAG,QAAQ,OAAO,gBAAgB,UAPnC;AAAA;AAAA;AAAA;AAAA,WAO2C;AAAA,IAE3C,mDAAC,aAAU,IAAI,KAAK,SAAS,QAAQ,KAAK,UAA1C;AAAA;AAAA;AAAA;AAAA,WAAkD;AAAA,IAElD,mDAAC,SAAI,WAAU,iCACd;AAAA,yDAAC,UAAO,SAAQ,aAAY,SAAO,MAClC,6DAAC,QAAK,IAAG,MAAK,sBAAd;AAAA;AAAA;AAAA;AAAA,aAAoB,KADrB;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,MACA,mDAAC,gBAAa,MAAK,UAAS,QAAQ,YAAY,YAAY,KAAK,UAAU,QAAQ,+BAAnF;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,SAND;AAAA;AAAA;AAAA;AAAA,WAOA;AAAA,OA3BM;AAAA;AAAA;AAAA;AAAA,SA4BP;AACF;AACA,GAAG,qBAAqB,gCAAgC,OAAO,WAAY;AACzE,SAAO,CAAC,eAAe,cAAc,OAAO;AAC9C,CAAC;AACD,KAAK;AACL,IAAI;AACJ,aAAa,IAAI,qBAAqB;AAEtC,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": []
}
