{
  "version": 3,
  "sources": ["../../../app/routes/_layout+/_auth+/reset-password.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/_layout+/_auth+/reset-password.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/_layout+/_auth+/reset-password.tsx\");\n  import.meta.hot.lastModified = \"1706962583482.4053\";\n}\n// REMIX HMR END\n\nimport { getFormProps, getInputProps, useForm } from '@conform-to/react';\nimport { getZodConstraint, parseWithZod } from '@conform-to/zod';\nimport { invariant } from '@epic-web/invariant';\nimport { json, redirect } from '@remix-run/node';\nimport { Form, useActionData, useLoaderData } from '@remix-run/react';\nimport { prisma, requireAnonymous, resetUserPassword, verifySessionStorage } from '~/app/core/server/index.server.ts';\nimport { useIsPending } from '~/app/shared/lib/hooks/index.ts';\nimport { PasswordAndConfirmPasswordSchema } from '~/app/shared/schemas/index.ts';\nimport { ErrorList, Field, GeneralErrorBoundary, StatusButton } from '~/app/shared/ui/index.ts';\nconst RESET_PASSWORD_USERNAME_SESSION_KEY = 'resetPasswordUsername';\nexport async function handleVerification({\n  submission\n}) {\n  invariant(submission.status === 'success', 'Submission should be successful by now');\n  const target = submission.value.target;\n  const user = await prisma.user.findFirst({\n    where: {\n      OR: [{\n        email: target\n      }, {\n        username: target\n      }]\n    },\n    select: {\n      email: true,\n      username: true\n    }\n  });\n\n  // we don't want to say the user is not found if the email is not found\n  // because that would allow an attacker to check if an email is registered\n  if (!user) {\n    return json({\n      result: submission.reply({\n        fieldErrors: {\n          code: ['Invalid code']\n        }\n      })\n    }, {\n      status: 400\n    });\n  }\n  const verifySession = await verifySessionStorage.getSession();\n  verifySession.set(RESET_PASSWORD_USERNAME_SESSION_KEY, user.username);\n  return redirect('/reset-password', {\n    headers: {\n      'set-cookie': await verifySessionStorage.commitSession(verifySession)\n    }\n  });\n}\nconst ResetPasswordSchema = PasswordAndConfirmPasswordSchema;\nasync function requireResetPasswordUsername(request) {\n  await requireAnonymous(request);\n  const verifySession = await verifySessionStorage.getSession(request.headers.get('cookie'));\n  const resetPasswordUsername = verifySession.get(RESET_PASSWORD_USERNAME_SESSION_KEY);\n  if (typeof resetPasswordUsername !== 'string' || !resetPasswordUsername) {\n    throw redirect('/login');\n  }\n  return resetPasswordUsername;\n}\nexport async function loader({\n  request\n}) {\n  const resetPasswordUsername = await requireResetPasswordUsername(request);\n  return json({\n    resetPasswordUsername\n  });\n}\nexport async function action({\n  request\n}) {\n  const resetPasswordUsername = await requireResetPasswordUsername(request);\n  const formData = await request.formData();\n  const submission = parseWithZod(formData, {\n    schema: ResetPasswordSchema\n  });\n  if (submission.status !== 'success') {\n    return json({\n      result: submission.reply()\n    }, {\n      status: submission.status === 'error' ? 400 : 200\n    });\n  }\n  const {\n    password\n  } = submission.value;\n  await resetUserPassword({\n    username: resetPasswordUsername,\n    password\n  });\n  const verifySession = await verifySessionStorage.getSession();\n  return redirect('/login', {\n    headers: {\n      'set-cookie': await verifySessionStorage.destroySession(verifySession)\n    }\n  });\n}\nexport default function ResetPasswordRoute() {\n  _s();\n  const data = useLoaderData();\n  const actionData = useActionData();\n  const isPending = useIsPending();\n  const [form, fields] = useForm({\n    id: 'reset-password',\n    constraint: getZodConstraint(ResetPasswordSchema),\n    lastResult: actionData?.result,\n    onValidate({\n      formData\n    }) {\n      return parseWithZod(formData, {\n        schema: ResetPasswordSchema\n      });\n    },\n    shouldRevalidate: 'onBlur'\n  });\n  return <div className=\"flex flex-col justify-center pb-32 pt-20\">\n\t\t\t<div className=\"text-center\">\n\t\t\t\t<h1 className=\"text-h1\">Password Reset</h1>\n\t\t\t\t<p className=\"mt-3 text-body-md text-muted-foreground\">\n\t\t\t\t\tHi, {data.resetPasswordUsername}. No worries. It happens all the time.\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t\t<div className=\"mx-auto mt-16 min-w-[368px] max-w-sm\">\n\t\t\t\t<Form method=\"POST\" {...getFormProps(form)}>\n\t\t\t\t\t<Field labelProps={{\n          htmlFor: fields.password.id,\n          children: 'New Password'\n        }} inputProps={{\n          ...getInputProps(fields.password, {\n            type: 'password'\n          }),\n          autoComplete: 'new-password',\n          autoFocus: true\n        }} errors={fields.password.errors} />\n\t\t\t\t\t<Field labelProps={{\n          htmlFor: fields.confirmPassword.id,\n          children: 'Confirm Password'\n        }} inputProps={{\n          ...getInputProps(fields.confirmPassword, {\n            type: 'password'\n          }),\n          autoComplete: 'new-password'\n        }} errors={fields.confirmPassword.errors} />\n\n\t\t\t\t\t<ErrorList errors={form.errors} id={form.errorId} />\n\n\t\t\t\t\t<StatusButton className=\"w-full\" status={isPending ? 'pending' : form.status ?? 'idle'} type=\"submit\" disabled={isPending}>\n\t\t\t\t\t\tReset password\n\t\t\t\t\t</StatusButton>\n\t\t\t\t</Form>\n\t\t\t</div>\n\t\t</div>;\n}\n_s(ResetPasswordRoute, \"LlpdpXx3F0DiRi9p4RwyMUO3ZDI=\", false, function () {\n  return [useLoaderData, useActionData, useIsPending, useForm];\n});\n_c = ResetPasswordRoute;\nexport const meta = () => {\n  return [{\n    title: 'Reset Password | GeekConsole'\n  }];\n};\nexport function ErrorBoundary() {\n  return <GeneralErrorBoundary />;\n}\n_c2 = ErrorBoundary;\nvar _c, _c2;\n$RefreshReg$(_c, \"ResetPasswordRoute\");\n$RefreshReg$(_c2, \"ErrorBoundary\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": []
}
