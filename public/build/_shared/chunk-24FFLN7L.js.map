{
  "version": 3,
  "sources": ["../../../app/routes/_layout+/_auth+/onboarding.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/_layout+/_auth+/onboarding.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/_layout+/_auth+/onboarding.tsx\");\n  import.meta.hot.lastModified = \"1706962583481.775\";\n}\n// REMIX HMR END\n\nimport { getFormProps, getInputProps, useForm } from '@conform-to/react';\nimport { getZodConstraint, parseWithZod } from '@conform-to/zod';\nimport { invariant } from '@epic-web/invariant';\nimport { json, redirect } from '@remix-run/node';\nimport { Form, useActionData, useLoaderData, useSearchParams } from '@remix-run/react';\nimport { AuthenticityTokenInput } from 'remix-utils/csrf/react';\nimport { HoneypotInputs } from 'remix-utils/honeypot/react';\nimport { safeRedirect } from 'remix-utils/safe-redirect';\nimport { z } from 'zod';\nimport { SESSION_KEY, authSessionStorage, checkHoneypot, prisma, redirectWithConfetti, requireAnonymous, signup, validateCSRF, verifySessionStorage } from '~/app/core/server/index.server.ts';\nimport { useIsPending } from '~/app/shared/lib/hooks/index.ts';\nimport { NameSchema, PasswordSchema, UsernameSchema } from '~/app/shared/schemas/index.ts';\nimport { CheckboxField, ErrorList, Field, Spacer, StatusButton } from '~/app/shared/ui/index.ts';\nconst ONBOARDING_EMAIL_SESSION_KEY = 'onboardingEmail';\nconst SignupFormSchema = z.object({\n  username: UsernameSchema,\n  name: NameSchema,\n  password: PasswordSchema,\n  confirmPassword: PasswordSchema,\n  agreeToTermsOfServiceAndPrivacyPolicy: z.boolean({\n    required_error: 'You must agree to the terms of service and privacy policy'\n  }),\n  remember: z.boolean().optional(),\n  redirectTo: z.string().optional()\n}).superRefine(_c = ({\n  confirmPassword,\n  password\n}, ctx) => {\n  if (confirmPassword !== password) {\n    ctx.addIssue({\n      path: ['confirmPassword'],\n      code: 'custom',\n      message: 'The passwords must match'\n    });\n  }\n});\n_c2 = SignupFormSchema;\nasync function requireOnboardingEmail(request) {\n  await requireAnonymous(request);\n  const verifySession = await verifySessionStorage.getSession(request.headers.get('cookie'));\n  const email = verifySession.get(ONBOARDING_EMAIL_SESSION_KEY);\n  if (typeof email !== 'string' || !email) {\n    throw redirect('/signup');\n  }\n  return email;\n}\nexport async function loader({\n  request\n}) {\n  const email = await requireOnboardingEmail(request);\n  return json({\n    email\n  });\n}\nexport async function action({\n  request\n}) {\n  const email = await requireOnboardingEmail(request);\n  const formData = await request.formData();\n  await validateCSRF(formData, request.headers);\n  checkHoneypot(formData);\n  const submission = await parseWithZod(formData, {\n    schema: intent => SignupFormSchema.superRefine(async (data, ctx) => {\n      const existingUser = await prisma.user.findUnique({\n        where: {\n          username: data.username\n        },\n        select: {\n          id: true\n        }\n      });\n      if (existingUser) {\n        ctx.addIssue({\n          path: ['username'],\n          code: z.ZodIssueCode.custom,\n          message: 'A user already exists with this username'\n        });\n        return;\n      }\n    }).transform(async data => {\n      if (intent !== null) return {\n        ...data,\n        session: null\n      };\n      const session = await signup({\n        ...data,\n        email\n      });\n      return {\n        ...data,\n        session\n      };\n    }),\n    async: true\n  });\n  if (submission.status !== 'success' || !submission.value.session) {\n    return json({\n      result: submission.reply()\n    }, {\n      status: submission.status === 'error' ? 400 : 200\n    });\n  }\n  const {\n    session,\n    remember,\n    redirectTo\n  } = submission.value;\n  const cookieSession = await authSessionStorage.getSession(request.headers.get('cookie'));\n  cookieSession.set(SESSION_KEY, session.id);\n  const verifySession = await verifySessionStorage.getSession(request.headers.get('cookie'));\n  const headers = new Headers();\n  headers.append('set-cookie', await authSessionStorage.commitSession(cookieSession, {\n    expires: remember ? session.expirationDate : undefined\n  }));\n  headers.append('set-cookie', await verifySessionStorage.destroySession(verifySession));\n  return redirectWithConfetti(safeRedirect(redirectTo), {\n    headers\n  });\n}\nexport async function handleVerification({\n  request,\n  submission\n}) {\n  invariant(submission.status === 'success', 'Submission should be successful by now');\n  const verifySession = await verifySessionStorage.getSession(request.headers.get('cookie'));\n  verifySession.set(ONBOARDING_EMAIL_SESSION_KEY, submission.value.target);\n  return redirect('/onboarding', {\n    headers: {\n      'set-cookie': await verifySessionStorage.commitSession(verifySession)\n    }\n  });\n}\nexport default function OnboardingRoute() {\n  _s();\n  const data = useLoaderData();\n  const actionData = useActionData();\n  const isPending = useIsPending();\n  const [searchParams] = useSearchParams();\n  const redirectTo = searchParams.get('redirectTo');\n  const [form, fields] = useForm({\n    id: 'signup-form',\n    constraint: getZodConstraint(SignupFormSchema),\n    defaultValue: {\n      redirectTo\n    },\n    lastResult: actionData?.result,\n    onValidate({\n      formData\n    }) {\n      return parseWithZod(formData, {\n        schema: SignupFormSchema\n      });\n    },\n    shouldRevalidate: 'onBlur'\n  });\n  return <div className=\"flex min-h-full flex-col justify-center pb-32 pt-20\">\n\t\t\t<div className=\"mx-auto w-full max-w-lg\">\n\t\t\t\t<div className=\"flex flex-col gap-3 text-center\">\n\t\t\t\t\t<h1 className=\"text-h1\">Welcome aboard {data.email}!</h1>\n\t\t\t\t\t<p className=\"text-body-md text-muted-foreground\">\n\t\t\t\t\t\tPlease enter your details.\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\n\t\t\t\t<Spacer size=\"xs\" />\n\n\t\t\t\t<Form method=\"POST\" className=\"mx-auto min-w-[368px] max-w-sm\" {...getFormProps(form)}>\n\t\t\t\t\t<AuthenticityTokenInput />\n\t\t\t\t\t<HoneypotInputs />\n\n\t\t\t\t\t<Field labelProps={{\n          htmlFor: fields.username.id,\n          children: 'Username'\n        }} inputProps={{\n          ...getInputProps(fields.username, {\n            type: 'text'\n          }),\n          autoComplete: 'username',\n          className: 'lowercase'\n        }} errors={fields.username.errors} />\n\t\t\t\t\t<Field labelProps={{\n          htmlFor: fields.name.id,\n          children: 'Name'\n        }} inputProps={{\n          ...getInputProps(fields.name, {\n            type: 'text'\n          }),\n          autoComplete: 'name'\n        }} errors={fields.name.errors} />\n\t\t\t\t\t<Field labelProps={{\n          htmlFor: fields.password.id,\n          children: 'Password'\n        }} inputProps={{\n          ...getInputProps(fields.password, {\n            type: 'password'\n          }),\n          autoComplete: 'new-password'\n        }} errors={fields.password.errors} />\n\n\t\t\t\t\t<Field labelProps={{\n          htmlFor: fields.confirmPassword.id,\n          children: 'Confirm Password'\n        }} inputProps={{\n          ...getInputProps(fields.confirmPassword, {\n            type: 'password'\n          }),\n          autoComplete: 'new-password'\n        }} errors={fields.confirmPassword.errors} />\n\n\t\t\t\t\t<CheckboxField labelProps={{\n          htmlFor: fields.agreeToTermsOfServiceAndPrivacyPolicy.id,\n          children: 'Do you agree to our Terms of Service and Privacy Policy?'\n        }} buttonProps={getInputProps(fields.agreeToTermsOfServiceAndPrivacyPolicy, {\n          type: 'checkbox'\n        })} errors={fields.agreeToTermsOfServiceAndPrivacyPolicy.errors} />\n\t\t\t\t\t<CheckboxField labelProps={{\n          htmlFor: fields.remember.id,\n          children: 'Remember me'\n        }} buttonProps={getInputProps(fields.remember, {\n          type: 'checkbox'\n        })} errors={fields.remember.errors} />\n\n\t\t\t\t\t<input {...getInputProps(fields.redirectTo, {\n          type: 'hidden'\n        })} />\n\t\t\t\t\t<ErrorList errors={form.errors} id={form.errorId} />\n\n\t\t\t\t\t<div className=\"flex items-center justify-between gap-6\">\n\t\t\t\t\t\t<StatusButton className=\"w-full\" status={isPending ? 'pending' : form.status ?? 'idle'} type=\"submit\" disabled={isPending}>\n\t\t\t\t\t\t\tCreate an account\n\t\t\t\t\t\t</StatusButton>\n\t\t\t\t\t</div>\n\t\t\t\t</Form>\n\t\t\t</div>\n\t\t</div>;\n}\n_s(OnboardingRoute, \"SbEzVWUNyTwM/qcAIjF6pChQLW8=\", false, function () {\n  return [useLoaderData, useActionData, useIsPending, useSearchParams, useForm];\n});\n_c3 = OnboardingRoute;\nexport const meta = () => {\n  return [{\n    title: 'Setup GeekConsole Account'\n  }];\n};\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"SignupFormSchema$z\\n\\t.object({\\n\\t\\tusername: UsernameSchema,\\n\\t\\tname: NameSchema,\\n\\t\\tpassword: PasswordSchema,\\n\\t\\tconfirmPassword: PasswordSchema,\\n\\t\\tagreeToTermsOfServiceAndPrivacyPolicy: z.boolean({\\n\\t\\t\\trequired_error:\\n\\t\\t\\t\\t'You must agree to the terms of service and privacy policy',\\n\\t\\t}),\\n\\t\\tremember: z.boolean().optional(),\\n\\t\\tredirectTo: z.string().optional(),\\n\\t})\\n\\t.superRefine\");\n$RefreshReg$(_c2, \"SignupFormSchema\");\n$RefreshReg$(_c3, \"OnboardingRoute\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": []
}
