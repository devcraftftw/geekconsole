generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password     Password?
  image        UserImage?
  books        Book[]
  carSpendings CarSpending[]
  roles        Role[]
  sessions     Session[]
  connections  Connection[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model UserImage {
  id          String   @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Book {
  id            String   @id @default(cuid())
  title         String
  author        String
  year          Int
  readingStatus String
  description   String?
  comment       String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId String

  images BookImage[]

  // non-unique foreign key
  @@index([ownerId])
}

model BookImage {
  id          String   @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  book   Book   @relation(fields: [bookId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  bookId String

  // non-unique foreign key
  @@index([bookId])
}

model CarSpending {
  id        String   @id @default(cuid())
  date      DateTime
  value     Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  type   CarSpendingType @relation(fields: [typeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  typeId String

  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId String
}

model CarSpendingType {
  id          String        @id @default(cuid())
  name        String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  CarSpending CarSpending[]
}

model Permission {
  id          String  @id @default(cuid())
  action      String // create, read, update, delete
  entity      String // user, book, carSpending
  access      String // own, any
  description String? @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles Role[]

  @@unique([action, entity, access])
}

model Role {
  id          String  @id @default(cuid())
  name        String  @unique
  description String? @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  permissions Permission[]
  users       User[]
}

model Session {
  id             String   @id @default(cuid())
  expirationDate DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  @@index([userId])
}

model Verification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // The type of verification, e.g. "email" or "phone"
  type String

  // The thing we're trying to verify, e.g. a user's email or phone number
  target String

  // The secret key used to generate the otp
  secret String

  // The algorithm used to generate the otp
  algorithm String

  // The number of digits in the otp
  digits Int

  // The number of seconds the otp is valid for
  period Int

  // The valid characters for the otp
  charSet String

  // When it's safe to delete this verification
  expiresAt DateTime?

  @@unique([target, type])
}

model Connection {
  id String @id @default(cuid())

  providerName String
  providerId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  @@unique([providerName, providerId])
  // non-unique foreign key
  @@index([userId])
}
